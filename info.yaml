---
# TinyTapeout project information
project:
  wokwi_id: 0 # If using wokwi, set this to your project's ID
  source_files: # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - alu.v
  top_module: "hulohot_alu" # put the name of your top module here, make it unique by prepending your github username

# keep a track of the submission yaml
yaml_version: 2.1

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation:
  author: "Ethan Brugger" # Your name
  discord: "hulohot#8346" # Your discord handle - make sure to include the # part as well
  title: "3-Bit ALU" # Project title
  description: "An arithmetic unit that has 4 operations, add, sub, bitwise and, and bitwise or." # Short description of what your project does
  how_it_works: "All computation paths are calcualted, and a 4-1 MUX selects the correct output \n
                based on the selection signal. There is no overflow/underflow protection for the \n
                add/sub operation" # Longer description of how the project works
  how_to_test: "Due to the simple nature of the design, you can exhaustively test and verify all inputs" # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw: "" # Describe any external hardware needed
  language: "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link: "" # URL to longer form documentation, eg the README.md in your repository
  clock_hz: 0 # Clock frequency in Hz (if required) we are expecting max clock frequency to be ~6khz. Provided on input 0.
  picture: "" # relative path to a picture in your repository
  inputs: # a description of what the inputs do
    - a[0]
    - a[1]
    - a[2]
    - b[0]
    - b[1]
    - b[2]
    - opcode[0]
    - opcode[1]
  outputs:
    - z[0] # a description of what the outputs do
    - z[1]
    - z[2]
    - z[3]
    - none
    - none
    - none
    - none
